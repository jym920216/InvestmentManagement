buildscript {
	ext {
		springBootVersion = '1.5.1.RELEASE'
	}
	repositories {
        maven { url "http://repo.winsigns-dev.com/artifactory/mavenCentral" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
                classpath 'se.transmode.gradle:gradle-docker:1.2'
	}
}

plugins {
	id "org.flywaydb.flyway" version "4.1.1"
}

flyway {
    def env = System.getenv()
    def mysql_ip_addr = env.MYSQL_IP_ADDR?env.MYSQL_IP_ADDR:"127.0.0.1"

    url = "jdbc:mysql://$mysql_ip_addr:3306/tradedb"
    println "mysql url: $url"    
    
	user = 'mariadb'
	password = "mariadb"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'docker'

jar {
	baseName = 'trade-service'
	version = '0.0.1-SNAPSHOT'
}

sourceCompatibility = 1.8

repositories {
    maven { url "http://repo.winsigns-dev.com/artifactory/mavenCentral" }
    maven { url "http://repo.winsigns-dev.com/artifactory/spring-snapshot" }
    maven { url "http://repo.winsigns-dev.com/artifactory/spring-milestone" }
    maven { url "http://repo.winsigns-dev.com/artifactory/winsigns"}
}

//to avoid compiling error about conflicts
configurations.all{
	exclude group: "org.slf4j", module: "slf4j-log4j12"
}

configurations {
    compile.exclude module: "spring-boot-starter-tomcat"
}

dependencies {
	compile('com.winsigns:investment-framework:0.0.3-SNAPSHOT')
	
	compile('org.springframework.boot:spring-boot-starter-hateoas')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-undertow')
	compile('org.springframework.cloud:spring-cloud-starter-eureka')
	compile("org.springframework.cloud:spring-cloud-starter-hystrix")

	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('mysql:mysql-connector-java')

	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-logging')
	compile('net.logstash.logback:logstash-logback-encoder:4.8')
	
	compile('org.projectlombok:lombok')

	testCompile('org.springframework.boot:spring-boot-starter-test')
}

def getVersion() {
    def env = System.getenv()
    def buildNumber = env.BUILD_NUMBER?.toInteger()
    def buildType = env.BUILD_TYPE

    def version = String.format("%s%d", buildType?buildType:"dev", buildNumber?buildNumber:0)
    return version
}

task updateVersion << {
    def env = System.getenv()
    def workspace = env.WORKSPACE

    if (!workspace?.trim()){
        workspace = ".."
    }

    def version = getVersion()
    println "[updateVersion]version= $version"
    def app_yml = String.format("%s/%s/src/main/resources/application.yml", workspace, jar.baseName)
    String contents = new File(app_yml).getText("UTF-8")

    contents = contents.replaceAll('%%VERSION%%', version)
    new File(app_yml).write(contents, "UTF-8")
}

docker {
    registry = "docker-registry:5000"
}

task copyJar(dependsOn: 'jar') << {
    copy {
        from "."
        into "build/docker"
        include "wait-for-it.sh"
        include "start.sh"
        include "build/libs/${jar.baseName}-${jar.version}.jar"
    }
}

task buildDocker(type: Docker) {
    dependsOn copyJar

    project.group = docker.registry
    applicationName = jar.baseName
    tagVersion = getVersion()
    println "[docker]version= $tagVersion"
    dockerfile = "Dockerfile"
    push = true
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:Dalston.BUILD-SNAPSHOT"
	}
}

bootRun {
    environment SPRING_PROFILES_ACTIVE: environment.SPRING_PROFILES_ACTIVE ?: "dev" 
}

test {
    environment SPRING_PROFILES_ACTIVE: environment.SPRING_PROFILES_ACTIVE ?: "dev" 
}
